// ktrl Example Configuration File
// -------------------------------
//
// ktrl config files use `ron` (Rust Object Notation) to serialize
// the text into the internal `cfg::Cfg` struct.
//
// - The full KEY_... listing can be found inside the `keys::KeyCode` enum
// - Layer entries are mapping between a source `KeyCode` into an `Action` (more on that below)
//
(
    // ktrl will register a TapHold as an hold after 300ms
    tap_hold_wait_time: 300,

    // ktrl will register a TapDance if all taps occur within a 1000ms period (1s)
    tap_dance_wait_time: 1000,

    // Gives names to layers
    layer_aliases: {
        "base": 0,
        "f_is_enter": 1,
        "g_is_enter": 2,
        "h_is_enter": 3,
        "i_is_enter": 4,
    },

    layers: [
        // Layer 0 (Base Layer)
        //
        //   Layer 0 is a bit special.
        //   When ktrl stats-up, it automatically enables this layer.
        //   After that, it can never be turned off.
        //   I.E it configures the default behavior (when all other layers are off).
        //
        //   All the layer entries repeat the same pattern.
        //   They map a source `KeyCode` to an `Action`.
        //
        {
            // These two lines swap Capslock and Left-Ctrl.
            // As a bonus, an error sound will be played when you press Left-Ctrl
            KEY_CAPSLOCK:  Tap(Key(KEY_LEFTCTRL)),
            KEY_LEFTCTRL:  Tap(Key(KEY_LEFTCTRL)),

            // F1 on regular tap, layer toggle on hold.
            // A toggled layer will stay active until toggled again.
            KEY_F1:  TapHold(Key(KEY_F1), ToggleLayerAlias("f_is_enter")),

            // F2 on regular tap, layer toggle by index otherwise.
            KEY_F2:  TapHold(Key(KEY_F2), ToggleLayer(2)),

            // F2 on regular tap, layer toggle by index otherwise.
            KEY_F3:  TapHold(Key(KEY_F3), ToggleLayerAlias("h_is_enter")),

            // F4 on regular tap, layer toggle by index otherwise.
            KEY_F4:  TapHold(Key(KEY_F4), ToggleLayerAlias("i_is_enter")),
        },
        // Layer 1
        {
            // These two entries are to illustrate layer "priorities".
            // Higher layers take precedence over lower layers.
            //
            // E.g these two entries will override the two lower entries.
            // Thereby, restoring the swap we did over there.
            //
            KEY_CAPSLOCK:  Tap(Key(KEY_CAPSLOCK)),
            KEY_LEFTCTRL:  Tap(Key(KEY_LEFTCTRL)),

            // Press once for Enter, press 2 time for Sticky Shift.
            // Sticky keys will remain active until pressed again.
            KEY_F:   TapDance(2, Key(KEY_ENTER), KeySticky(KEY_LEFTSHIFT)),

            // Press once for D, press 3 to toggle this layer
            KEY_D:   TapDance(3, Key(KEY_D), ToggleLayer(1)),

            // Map Alt to Ctrl-Alt-Shift
            KEY_LEFTALT:  Tap(Meh),

            // Map Shift to Ctrl-Alt-Shift-Win
            KEY_LEFTSHIFT: Tap(Hyper),
        },
        // Layer 2
        {
            // Press once for enter, 2 times for sticky shift
            KEY_G:   TapDance(2, Key(KEY_ENTER), KeySticky(KEY_LEFTSHIFT)),
        },
        // Layer 3
        {
            // Press once for enter, 2 times for sticky shift
            KEY_H:   TapDance(2, Key(KEY_ENTER), KeySticky(KEY_LEFTSHIFT)),
        },
        // Layer 4
        {
            KEY_I: TapDance(2, Key(KEY_ENTER), KeySticky(KEY_LEFTSHIFT)),
        }
    ],
)
